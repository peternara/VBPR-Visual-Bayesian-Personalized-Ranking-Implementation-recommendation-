{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"epoch50 k2000","version":"0.3.2","provenance":[]},"kernelspec":{"name":"python2","display_name":"Python 2"}},"cells":[{"metadata":{"id":"Eb4vOcVO0AIH","colab_type":"code","outputId":"92c034dc-9c4b-4fc9-f6a3-03096c869624","executionInfo":{"status":"ok","timestamp":1552543677113,"user_tz":-480,"elapsed":18385,"user":{"displayName":"Jacob Ji","photoUrl":"https://lh3.googleusercontent.com/-zoRekIA1fCY/AAAAAAAAAAI/AAAAAAAACBQ/eV12vlBRQiA/s64/photo.jpg","userId":"06638368627777389358"}},"colab":{"base_uri":"https://localhost:8080/","height":70}},"cell_type":"code","source":["!pip install -U -q PyDrive\n","from pydrive.auth import GoogleAuth\n","from pydrive.drive import GoogleDrive\n","from google.colab import auth\n","from oauth2client.client import GoogleCredentials\n","\n","# 授权登录，仅第一次的时候会鉴权\n","def login_google_drive():\n","  auth.authenticate_user()\n","  gauth = GoogleAuth()\n","  gauth.credentials = GoogleCredentials.get_application_default()\n","  drive = GoogleDrive(gauth)\n","  return drive\n","\n","# 列出id对应目录的所有文件\n","# \"q\" 查询条件教程详见：https://developers.google.com/drive/v2/web/search-parameters\n","def list_file(drive, dir_id_str):\n","  file_list = drive.ListFile({'q': dir_id_str+\" in parents and trashed=false\"}).GetList()\n","  for file1 in file_list:\n","    print('title: %s, id: %s, mimeType: %s' % (file1['title'], file1['id'], file1[\"mimeType\"]))\n","\n","def cache_data(file_id_str):\n","  # id 替换成上一步读取到的对应文件 id\n","  u_data = drive.CreateFile({'id': file_id_str}) \n","  \n","  #这里的下载操作只是缓存，不会在你的Google Drive 目录下多下载一个文件\n","  u_data.GetContentFile('u.data', \"text/csv\")\n","  print(\"缓存成功\")\n","\n","def load_data():\n","    titles = []\n","    print(\"正在加载数据...\")\n","    with open(\"u.data\", \"r\") as f:\n","        for line in f.readlines():\n","            titles.append(line.strip())\n","            \n","    print(\"一共加载了 %s 个标题\" % len(titles))\n","\n","    return titles\n","  \n","drive = login_google_drive()\n","#list_file(drive,\"'1DCdKTVKMGR_ei-NWE-68Y_mRFPf5RQhv'\")\n","cache_data(\"14Eha5chGz6RNWIYALvZBGI8Q-yAUmj7l\")\n","titles = load_data()\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["缓存成功\n","正在加载数据...\n","一共加载了 100000 个标题\n"],"name":"stdout"}]},{"metadata":{"id":"jpmTubbP2J5D","colab_type":"text"},"cell_type":"markdown","source":["\n","备注：修改参数：BatchSize:256, LR:0.01, RR:0.001"]},{"metadata":{"id":"rD1k072F0g8n","colab_type":"code","outputId":"68d4fb8b-c0f1-40bc-c60b-67a1b09c5267","colab":{"base_uri":"https://localhost:8080/","height":5245},"executionInfo":{"status":"ok","timestamp":1552552758700,"user_tz":-480,"elapsed":42,"user":{"displayName":"Jacob Ji","photoUrl":"https://lh3.googleusercontent.com/-zoRekIA1fCY/AAAAAAAAAAI/AAAAAAAACBQ/eV12vlBRQiA/s64/photo.jpg","userId":"06638368627777389358"}}},"cell_type":"code","source":["import numpy as np\n","import tensorflow as tf\n","import os\n","import random\n","from collections import defaultdict\n","\n","\n","def load_data():\n","    user_ratings = defaultdict(set)\n","    max_u_id = -1\n","    max_i_id = -1\n","    with open('u.data','r') as f:\n","        for line in f.readlines():\n","            u,i,_,_ = line.split(\"\\t\")\n","            u = int(u)\n","            i = int(i)\n","            user_ratings[u].add(i)\n","            max_u_id = max(u,max_u_id)\n","            max_i_id = max(i,max_i_id)\n","\n","\n","    print(\"max_u_id:\",max_u_id)\n","    print(\"max_i_idL\",max_i_id)\n","\n","    return max_u_id,max_i_id,user_ratings\n","\n","def generate_test(user_ratings):\n","    \"\"\"\n","    对每一个用户u，在user_ratings中随机找到他评分过的一部电影i,保存在user_ratings_test，\n","    后面构造训练集和测试集需要用到。\n","    \"\"\"\n","    user_test = dict()\n","    for u,i_list in user_ratings.items():\n","        user_test[u] = random.sample(user_ratings[u],1)[0]\n","    return user_test\n","\n","\n","def generate_train_batch(user_ratings,user_ratings_test,item_count,batch_size=256):\n","    \"\"\"\n","    构造训练用的三元组\n","    对于随机抽出的用户u，i可以从user_ratings随机抽出，而j也是从总的电影集中随机抽出，当然j必须保证(u,j)不在user_ratings中\n","    \"\"\"\n","    t = []\n","    for b in range(batch_size):\n","        u = random.sample(user_ratings.keys(),1)[0]\n","        i = random.sample(user_ratings[u],1)[0]\n","        while i==user_ratings_test[u]:\n","            i = random.sample(user_ratings[u],1)[0]\n","\n","        j = random.randint(1,item_count)\n","        while j in user_ratings[u]:\n","            j = random.randint(1,item_count)\n","\n","        t.append([u,i,j])\n","\n","    return np.asarray(t)\n","\n","\n","def generate_test_batch(user_ratings,user_ratings_test,item_count):\n","    \"\"\"\n","    对于每个用户u，它的评分电影i是我们在user_ratings_test中随机抽取的，它的j是用户u所有没有评分过的电影集合，\n","    比如用户u有1000部电影没有评分，那么这里该用户的测试集样本就有1000个\n","    \"\"\"\n","    for u in user_ratings.keys():\n","        t = []\n","        i = user_ratings_test[u]\n","        for j in range(1,item_count + 1):\n","            if not(j in user_ratings[u]):\n","                t.append([u,i,j])\n","        yield np.asarray(t)\n","        \n","        \n","  \n","\n","def bpr_mf(user_count,item_count,hidden_dim):\n","    u = tf.placeholder(tf.int32,[None])\n","    i = tf.placeholder(tf.int32,[None])\n","    j = tf.placeholder(tf.int32,[None])\n","\n","    user_emb_w = tf.get_variable(\"user_emb_w2\", [user_count + 1, hidden_dim],\n","                                 initializer=tf.random_normal_initializer(0, 0.1))\n","    item_emb_w = tf.get_variable(\"item_emb_w2\", [item_count + 1, hidden_dim],\n","                                 initializer=tf.random_normal_initializer(0, 0.1))\n","\n","    u_emb = tf.nn.embedding_lookup(user_emb_w, u)\n","    i_emb = tf.nn.embedding_lookup(item_emb_w, i)\n","    j_emb = tf.nn.embedding_lookup(item_emb_w, j)\n","\n","\n","    x = tf.reduce_sum(tf.multiply(u_emb,(i_emb-j_emb)),1,keepdims=True)\n","\n","    mf_auc = tf.reduce_mean(tf.to_float(x>0))\n","\n","    l2_norm = tf.add_n([\n","        tf.reduce_sum(tf.multiply(u_emb, u_emb)),\n","        tf.reduce_sum(tf.multiply(i_emb, i_emb)),\n","        tf.reduce_sum(tf.multiply(j_emb, j_emb))\n","    ])\n","\n","    regulation_rate = 0.0001\n","    bprloss = regulation_rate * l2_norm - tf.reduce_mean(tf.log(tf.sigmoid(x)))\n","\n","    train_op = tf.train.GradientDescentOptimizer(0.01).minimize(bprloss)\n","    return u, i, j, mf_auc, bprloss, train_op\n","\n","\n","user_count,item_count,user_ratings = load_data()\n","user_ratings_test = generate_test(user_ratings)\n","\n","with tf.Session() as sess:\n","    u,i,j,mf_auc,bprloss,train_op = bpr_mf(user_count,item_count,20)\n","    sess.run(tf.global_variables_initializer())\n","\n","    for epoch in range(1,50):\n","        _batch_bprloss = 0\n","        for k in range(1,2000):\n","            uij = generate_train_batch(user_ratings,user_ratings_test,item_count)\n","            _bprloss,_train_op = sess.run([bprloss,train_op],\n","                                          feed_dict={u:uij[:,0],i:uij[:,1],j:uij[:,2]})\n","\n","            _batch_bprloss += _bprloss\n","\n","        print(\"epoch:\",epoch)\n","        print(\"bpr_loss:\",_batch_bprloss / k)\n","        print(\"_train_op\")\n","\n","        user_count = 0\n","        _auc_sum = 0.0\n","\n","        for t_uij in generate_test_batch(user_ratings, user_ratings_test, item_count):\n","            _auc, _test_bprloss = sess.run([mf_auc, bprloss],\n","                                              feed_dict={u: t_uij[:, 0], i: t_uij[:, 1], j: t_uij[:, 2]}\n","                                              )\n","            user_count += 1\n","            _auc_sum += _auc\n","        print(\"test_loss: \", _test_bprloss, \"test_auc: \", _auc_sum / user_count)\n","        print(\"\")\n","    variable_names = [v.name for v in tf.trainable_variables()]\n","    values = sess.run(variable_names)\n","    for k, v in zip(variable_names, values):\n","        print(\"Variable: \", k)\n","        print(\"Shape: \", v.shape)\n","        print(v)\n","\n","#  0号用户对这个用户对所有电影的预测评分\n","session1 = tf.Session()\n","u1_dim = tf.expand_dims(values[0][0], 0)\n","u1_all = tf.matmul(u1_dim, values[1],transpose_b=True)\n","result_1 = session1.run(u1_all)\n","print (result_1)\n","\n","print(\"以下是给用户0的推荐：\")\n","p = np.squeeze(result_1)\n","p[np.argsort(p)[:-5]] = 0\n","for index in range(len(p)):\n","    if p[index] != 0:\n","        print (index, p[index])"],"execution_count":2,"outputs":[{"output_type":"stream","text":["('max_u_id:', 943)\n","('max_i_idL', 1682)\n","WARNING:tensorflow:From /usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Colocations handled automatically by placer.\n","WARNING:tensorflow:From <ipython-input-2-135d44466dda>:92: to_float (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use tf.cast instead.\n","WARNING:tensorflow:From /usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use tf.cast instead.\n","('epoch:', 1)\n","('bpr_loss:', 0.7087000467110539)\n","_train_op\n","('test_loss: ', 0.8347106, 'test_auc: ', 0.48641421787460776)\n","\n","('epoch:', 2)\n","('bpr_loss:', 0.7086951437444912)\n","_train_op\n","('test_loss: ', 0.83438224, 'test_auc: ', 0.4864258576972259)\n","\n","('epoch:', 3)\n","('bpr_loss:', 0.7086069802751298)\n","_train_op\n","('test_loss: ', 0.83404684, 'test_auc: ', 0.48640432332284117)\n","\n","('epoch:', 4)\n","('bpr_loss:', 0.7084109196667674)\n","_train_op\n","('test_loss: ', 0.83373386, 'test_auc: ', 0.48636985014812245)\n","\n","('epoch:', 5)\n","('bpr_loss:', 0.7083415107884485)\n","_train_op\n","('test_loss: ', 0.83339524, 'test_auc: ', 0.48634455618746075)\n","\n","('epoch:', 6)\n","('bpr_loss:', 0.7082068864973621)\n","_train_op\n","('test_loss: ', 0.8330948, 'test_auc: ', 0.4863342675450159)\n","\n","('epoch:', 7)\n","('bpr_loss:', 0.708063588403594)\n","_train_op\n","('test_loss: ', 0.8327751, 'test_auc: ', 0.48638647320723033)\n","\n","('epoch:', 8)\n","('bpr_loss:', 0.7080213950836044)\n","_train_op\n","('test_loss: ', 0.83244175, 'test_auc: ', 0.4863944228908046)\n","\n","('epoch:', 9)\n","('bpr_loss:', 0.7078794861149943)\n","_train_op\n","('test_loss: ', 0.832155, 'test_auc: ', 0.48640388439930154)\n","\n","('epoch:', 10)\n","('bpr_loss:', 0.7077984910955901)\n","_train_op\n","('test_loss: ', 0.8318158, 'test_auc: ', 0.4864410467348694)\n","\n","('epoch:', 11)\n","('bpr_loss:', 0.7077721507922597)\n","_train_op\n","('test_loss: ', 0.83149016, 'test_auc: ', 0.4864406802362273)\n","\n","('epoch:', 12)\n","('bpr_loss:', 0.7076455599788191)\n","_train_op\n","('test_loss: ', 0.83114946, 'test_auc: ', 0.48644305242840075)\n","\n","('epoch:', 13)\n","('bpr_loss:', 0.7075598620068377)\n","_train_op\n","('test_loss: ', 0.8307947, 'test_auc: ', 0.4864213074783277)\n","\n","('epoch:', 14)\n","('bpr_loss:', 0.7074743691475884)\n","_train_op\n","('test_loss: ', 0.830498, 'test_auc: ', 0.4864395218625421)\n","\n","('epoch:', 15)\n","('bpr_loss:', 0.7074247495778624)\n","_train_op\n","('test_loss: ', 0.8301099, 'test_auc: ', 0.48648389055985464)\n","\n","('epoch:', 16)\n","('bpr_loss:', 0.7073903543881144)\n","_train_op\n","('test_loss: ', 0.8298111, 'test_auc: ', 0.4864976746603587)\n","\n","('epoch:', 17)\n","('bpr_loss:', 0.7072032459859194)\n","_train_op\n","('test_loss: ', 0.8294568, 'test_auc: ', 0.4864944845842556)\n","\n","('epoch:', 18)\n","('bpr_loss:', 0.7071112757804932)\n","_train_op\n","('test_loss: ', 0.82910514, 'test_auc: ', 0.4865197066004953)\n","\n","('epoch:', 19)\n","('bpr_loss:', 0.7070349300724676)\n","_train_op\n","('test_loss: ', 0.82875687, 'test_auc: ', 0.4865064554533468)\n","\n","('epoch:', 20)\n","('bpr_loss:', 0.7070243757864784)\n","_train_op\n","('test_loss: ', 0.82849115, 'test_auc: ', 0.48648962139387536)\n","\n","('epoch:', 21)\n","('bpr_loss:', 0.7068563726259626)\n","_train_op\n","('test_loss: ', 0.82824373, 'test_auc: ', 0.4865333976870707)\n","\n","('epoch:', 22)\n","('bpr_loss:', 0.7068542001723289)\n","_train_op\n","('test_loss: ', 0.8279198, 'test_auc: ', 0.4865574280928656)\n","\n","('epoch:', 23)\n","('bpr_loss:', 0.7066340863317058)\n","_train_op\n","('test_loss: ', 0.8276672, 'test_auc: ', 0.4865424132441474)\n","\n","('epoch:', 24)\n","('bpr_loss:', 0.7066099061973099)\n","_train_op\n","('test_loss: ', 0.8273154, 'test_auc: ', 0.4866075554440659)\n","\n","('epoch:', 25)\n","('bpr_loss:', 0.7065234234656257)\n","_train_op\n","('test_loss: ', 0.826994, 'test_auc: ', 0.48663310030678214)\n","\n","('epoch:', 26)\n","('bpr_loss:', 0.7064589209232168)\n","_train_op\n","('test_loss: ', 0.8266832, 'test_auc: ', 0.4866700625847798)\n","\n","('epoch:', 27)\n","('bpr_loss:', 0.7064049746943689)\n","_train_op\n","('test_loss: ', 0.8263848, 'test_auc: ', 0.4866840658315101)\n","\n","('epoch:', 28)\n","('bpr_loss:', 0.7062420846224428)\n","_train_op\n","('test_loss: ', 0.82607585, 'test_auc: ', 0.4867244247930551)\n","\n","('epoch:', 29)\n","('bpr_loss:', 0.7062373308911212)\n","_train_op\n","('test_loss: ', 0.82574326, 'test_auc: ', 0.4867466051221113)\n","\n","('epoch:', 30)\n","('bpr_loss:', 0.7061298080180036)\n","_train_op\n","('test_loss: ', 0.825452, 'test_auc: ', 0.48670552844467574)\n","\n","('epoch:', 31)\n","('bpr_loss:', 0.7060360908806473)\n","_train_op\n","('test_loss: ', 0.8251894, 'test_auc: ', 0.4867734690398039)\n","\n","('epoch:', 32)\n","('bpr_loss:', 0.7060268030517277)\n","_train_op\n","('test_loss: ', 0.82486176, 'test_auc: ', 0.4868414465688349)\n","\n","('epoch:', 33)\n","('bpr_loss:', 0.705898224442765)\n","_train_op\n","('test_loss: ', 0.824506, 'test_auc: ', 0.48687650594741305)\n","\n","('epoch:', 34)\n","('bpr_loss:', 0.7058421806313504)\n","_train_op\n","('test_loss: ', 0.82420325, 'test_auc: ', 0.48690854580142096)\n","\n","('epoch:', 35)\n","('bpr_loss:', 0.705737531423688)\n","_train_op\n","('test_loss: ', 0.8239112, 'test_auc: ', 0.4869282516271364)\n","\n","('epoch:', 36)\n","('bpr_loss:', 0.7057135643632249)\n","_train_op\n","('test_loss: ', 0.8235554, 'test_auc: ', 0.4869789056338455)\n","\n","('epoch:', 37)\n","('bpr_loss:', 0.7056373691129469)\n","_train_op\n","('test_loss: ', 0.8232182, 'test_auc: ', 0.4870518029811012)\n","\n","('epoch:', 38)\n","('bpr_loss:', 0.705484751673446)\n","_train_op\n","('test_loss: ', 0.8229218, 'test_auc: ', 0.48711588362087166)\n","\n","('epoch:', 39)\n","('bpr_loss:', 0.7054375662631903)\n","_train_op\n","('test_loss: ', 0.8226669, 'test_auc: ', 0.48712975787300583)\n","\n","('epoch:', 40)\n","('bpr_loss:', 0.7053430146309899)\n","_train_op\n","('test_loss: ', 0.8223504, 'test_auc: ', 0.4872197221103766)\n","\n","('epoch:', 41)\n","('bpr_loss:', 0.7053013087630928)\n","_train_op\n","('test_loss: ', 0.8220636, 'test_auc: ', 0.4872700306329524)\n","\n","('epoch:', 42)\n","('bpr_loss:', 0.7052390038698777)\n","_train_op\n","('test_loss: ', 0.8217805, 'test_auc: ', 0.4873239454289988)\n","\n","('epoch:', 43)\n","('bpr_loss:', 0.7050738185271435)\n","_train_op\n","('test_loss: ', 0.8214773, 'test_auc: ', 0.48742468341967005)\n","\n","('epoch:', 44)\n","('bpr_loss:', 0.7050452363556656)\n","_train_op\n","('test_loss: ', 0.82122993, 'test_auc: ', 0.48746053271385975)\n","\n","('epoch:', 45)\n","('bpr_loss:', 0.7049825170625741)\n","_train_op\n","('test_loss: ', 0.8209605, 'test_auc: ', 0.48754649903742037)\n","\n","('epoch:', 46)\n","('bpr_loss:', 0.7048852658379131)\n","_train_op\n","('test_loss: ', 0.82064706, 'test_auc: ', 0.48763849079508426)\n","\n","('epoch:', 47)\n","('bpr_loss:', 0.7048949076271821)\n","_train_op\n","('test_loss: ', 0.8203841, 'test_auc: ', 0.48775288385709686)\n","\n","('epoch:', 48)\n","('bpr_loss:', 0.7048841419072077)\n","_train_op\n","('test_loss: ', 0.82012945, 'test_auc: ', 0.4878489690372194)\n","\n","('epoch:', 49)\n","('bpr_loss:', 0.7046779141001489)\n","_train_op\n","('test_loss: ', 0.8198818, 'test_auc: ', 0.4879492531804746)\n","\n","('Variable: ', u'user_emb_w2:0')\n","('Shape: ', (944, 20))\n","[[-0.10614947  0.10190582 -0.12639953 ...  0.10647029 -0.0619999\n","   0.23915306]\n"," [-0.00451753  0.24966684  0.0109751  ... -0.07914973 -0.08285566\n","  -0.00182712]\n"," [ 0.00169264 -0.04396017  0.02789616 ... -0.03346066  0.00374281\n","  -0.12636878]\n"," ...\n"," [-0.12149064  0.08187617 -0.10293406 ...  0.02909834  0.04615432\n","  -0.0698858 ]\n"," [ 0.19149894  0.01163639  0.15200637 ...  0.0596048   0.05781847\n","  -0.05377918]\n"," [-0.0443758  -0.01111202 -0.04657696 ...  0.06072776  0.03569856\n","  -0.06825016]]\n","('Variable: ', u'item_emb_w2:0')\n","('Shape: ', (1683, 20))\n","[[ 0.10178045  0.00827678  0.05337543 ...  0.08281302 -0.14931996\n","   0.02590207]\n"," [-0.08625344  0.0613358   0.04585346 ... -0.08462091 -0.06661879\n","  -0.18845576]\n"," [-0.04054991  0.07095747 -0.08369394 ... -0.10793445 -0.06311283\n","  -0.00473035]\n"," ...\n"," [ 0.0716551  -0.02689384  0.08678123 ...  0.02871268  0.20786256\n","  -0.03684201]\n"," [ 0.20927492  0.02778328 -0.00272007 ...  0.02569738 -0.01603588\n","   0.0472407 ]\n"," [-0.05287814 -0.0371359   0.01983146 ... -0.02181849 -0.00418904\n","   0.01655593]]\n","[[ 0.01683255 -0.0185474   0.03124636 ... -0.0651926  -0.01127762\n","   0.06786647]]\n","以下是给用户0的推荐：\n","(650, 0.123503976)\n","(990, 0.13308623)\n","(1001, 0.13369696)\n","(1130, 0.12865813)\n","(1163, 0.15281479)\n"],"name":"stdout"}]}]}