{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"mock_03b","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python2","display_name":"Python 2"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"6FCBjZs80nqx","colab_type":"code","outputId":"f6374493-4e74-443e-b467-1522f4f90c4e","executionInfo":{"status":"ok","timestamp":1554983475965,"user_tz":-480,"elapsed":4796,"user":{"displayName":"Jacob Ji","photoUrl":"https://lh3.googleusercontent.com/-zoRekIA1fCY/AAAAAAAAAAI/AAAAAAAACBQ/eV12vlBRQiA/s64/photo.jpg","userId":"06638368627777389358"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["!ls"],"execution_count":0,"outputs":[{"output_type":"stream","text":["adc.json     movies_reviews\t     reviews_desc.csv\n","movies_meta  movies_visual_features  sample_data\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"dKbQIhIcNDmV","colab_type":"text"},"source":["# 加载数据，json格式➡评分矩阵"]},{"cell_type":"code","metadata":{"id":"rylYDKzjMTKQ","colab_type":"code","colab":{}},"source":["from collections import defaultdict\n","import os\n","import struct\n","import numpy as np\n","import pandas as pd\n","import random\n","\n","# load data from raw amazon reviews csv file\n","def load_nvf(data_path):\n","  review_nvf = pd.read_csv(data_path)\n","  print(\"load nvf finished..\")\n","  return review_nvf\n","\n","# generate info sets coresponding of users, items, brands,prices... from csv sheet\n","def load_data_hybrid(review_nvf, min_items=1, min_users=1, sampling= True, sample_size = 0.5, data_size = 100000):\n","  \n","    user_ratings = defaultdict(set)\n","    item_ratings = defaultdict(set)\n","    max_u_id = -1\n","    max_i_id = -1\n","    user_count = 0\n","    item_count = 0\n","    reviews = 0\n","    users = {}  #auid\n","    items = {}  #asid\n","    brands = {}\n","    prices = {}\n","    prod_desc = {} #description\n","    \n","    random.seed(0)\n","    count = 0\n","    size_count = 0\n","    \n","    for value in review_nvf.values:\n","      # sample the data at the rate of sample_size\n","      if (sampling and random.random()>sample_size):\n","        continue\n","      reviews += 1\n","      auid = value[0]\n","      asid = value[1]\n","      # no need for review time info(value[2])\n","      brand = value[3]\n","      if value[4]:\n","        price = value[4]\n","      else:\n","        price = 0\n","      \n","\n","      u, i = None, None\n","      if auid in users:\n","        u = users[auid]\n","      else:\n","        user_count += 1  \n","        users[auid] = user_count\n","        u = user_count\n","                \n","      #print(auid)  #for test..\n","\n","      if asid in items:\n","        i = items[asid]\n","      else:\n","        item_count += 1 \n","        items[asid] = item_count\n","        i = item_count\n","        brands[i] = brand\n","        prices[i] = price\n","        # flag.. for some reason, here first assume all the description are null\n","        prod_desc[i] = list(np.zeros(4525))\n","  \n","      #print(asid) #for test..\n","\n","      user_ratings[u].add(i)\n","      item_ratings[i].add(u)\n","      max_u_id = max(u, max_u_id)\n","      max_i_id = max(i, max_i_id)\n","      \n","      if (count%5000 == 0):\n","        print(max_u_id,\" item: \",max_i_id) #for test..\n","        count = 0\n","      count += 1\n","      size_count += 1\n","      if (size_count > data_size):\n","        break\n","\n","    print(\"max_u_id: \", max_u_id)\n","    print(\"max_i_id: \", max_i_id)\n","    print(\"reviews : \", reviews)\n","\n","    # filter out users w/ less than X reviews\n","    num_u_id = 0\n","    num_i_id = 0\n","    num_reviews = 0\n","    user_ratings_filtered = defaultdict(set)\n","    for u, ids in user_ratings.iteritems():\n","        if len(ids) > min_items:\n","            # keep\n","            user_ratings_filtered[u] = ids\n","            num_u_id += 1\n","            num_reviews += len(ids)\n","    item_ratings_filtered = defaultdict(set)\n","    for ids, u in item_ratings.iteritems():\n","        if len(u) > min_users:\n","            # keep\n","            item_ratings_filtered[ids] = u\n","            num_i_id += 1\n","\n","\n","    # print the numbers of users, items, reviews\n","    print(\"u_id: \", num_u_id)\n","    print(\"i_id: \", num_i_id)\n","    print(\"reviews : \", num_reviews)\n","    return max_u_id, max_i_id, users, items, user_ratings_filtered, item_ratings_filtered, brands, prices, prod_desc"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vWsRbH2HNuL9","colab_type":"text"},"source":["# 加载商品的图片特征数据"]},{"cell_type":"code","metadata":{"id":"aHCOUrWxNyRn","colab_type":"code","colab":{}},"source":["#load image features for the given asin collection into dictionary\n","\n","# Image features are stored in a binary format, which consists of 10 characters (the product ID),\n","# followed by 4096 floats (repeated for every product). \n","\n","def load_image_features(path, items):\n","    count=0\n","    image_features = {}\n","    f = open(path, 'rb')\n","    while True:\n","        asin = f.read(10)\n","        if asin == '': break\n","        features_bytes = f.read(16384) # 4 * 4096 = 16KB, fast read by 16KB, don't unpack\n","  \n","        if asin in items: #only unpack 4096 bytes if w need it -- big speed up\n","            # flag.. here why divided by 44.4722\n","            features = (np.fromstring(features_bytes, dtype=np.float32)/44.4722)\n","            iid=items[asin]\n","            if len(features)==0:\n","                image_features[iid] = np.zeros(4096)\n","            else:\n","                image_features[iid] = features\n","    print(\"load vf finished..\")\n","    \n","    return image_features"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sajdTBUxN0xB","colab_type":"text"},"source":["# 从源数据中均匀挑选(u,i,j)数据对，构造训练集"]},{"cell_type":"code","metadata":{"id":"m5nQzPIXN0Yn","colab_type":"code","colab":{}},"source":["import tensorflow as tf\n","import os\n","import cPickle as pickle\n","import numpy\n","import random\n","import matplotlib.pyplot as plt\n","import sys\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","def uniform_sample_batch(train_ratings, test_ratings, item_count, advanced_features):\n","    neg_items = 2\n","    for u in train_ratings.keys():\n","        t = []\n","        iv = []\n","        jv = []\n","        for i in train_ratings[u]:\n","            if (u in test_ratings.keys()):\n","                if (i != test_ratings[u]):  # make sure it's not in the test set\n","                    for k in range(1,neg_items):\n","                        j = random.randint(1, item_count)\n","                        while j in train_ratings[u]:\n","                            j = random.randint(1, item_count)\n","                        # sometimes there will not be an image for given product\n","                        try:\n","                            advanced_features[i]\n","                            advanced_features[j]\n","                        except KeyError:\n","                            continue\n","                        iv.append(advanced_features[i])\n","                        jv.append(advanced_features[j])\n","                        t.append([u, i, j])\n","            else:\n","                for k in range(1,neg_items):\n","                    j = random.randint(1, item_count)\n","                    while j in train_ratings[u]:\n","                        j = random.randint(1, item_count)\n","                    # sometimes there will not be an image for given product\n","                    try:\n","                        advanced_features[i]\n","                        advanced_features[j]\n","                    except KeyError:\n","                        continue\n","                    iv.append(advanced_features[i])\n","                    jv.append(advanced_features[j])\n","                    t.append([u, i, j])\n","\n","        # block if queue is full\n","        if len(iv)>1:\n","            yield numpy.asarray(t), numpy.vstack(tuple(iv)), numpy.vstack(tuple(jv))\n","        else:\n","            continue"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PaBATIgbOKl8","colab_type":"text"},"source":["# 从源数据中均匀挑选(u,i,j)数据对，构造测试集"]},{"cell_type":"code","metadata":{"id":"OKRcKET9OKW4","colab_type":"code","colab":{}},"source":["def test_batch_generator_by_user(train_ratings, test_ratings, item_ratings, item_count, advanced_features, cold_start = False, cold_start_thresh = 5):\n","    # using leave one cv\n","    # here 400 is just artificial for experience..\n","    for u in random.sample(test_ratings.keys(), 400):\n","    #for u in test_ratings.keys():\n","        i = test_ratings[u]\n","      # if cold_start is on, then only sample those whose history reviews are less than cold_start_threshold(5)\n","        if (cold_start and len(item_ratings[i]) > cold_start_thresh-1):\n","            continue\n","            \n","        t = []\n","        ilist = []\n","        jlist = []\n","        count = 0\n","        for j in random.sample(range(item_count), 100):\n","            # find item not in test[u] and train[u]\n","            if j != test_ratings[u] and not (j in train_ratings[u]):\n","                try:\n","                    advanced_features[i]\n","                    advanced_features[j]\n","                except KeyError:\n","                    continue\n","\n","                count += 1\n","                t.append([u, i, j])\n","                ilist.append(advanced_features[i])\n","                jlist.append(advanced_features[j])\n","\n","        # print numpy.asarray(t).shape\n","        # print numpy.vstack(tuple(ilist)).shape\n","        # print numpy.vstack(tuple(jlist)).shape\n","        if (len(ilist) == 0):\n","            #print \"could not find neg item for user, count: \", count, u\n","            continue\n","        # here stack method is for sure of the data frame verification while running network..\n","        yield numpy.asarray(t), numpy.vstack(tuple(ilist)), numpy.vstack(tuple(jlist))"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gkCn1BV4OS8g","colab_type":"text"},"source":["# 从测试数据中生成(u,i)对"]},{"cell_type":"code","metadata":{"id":"YfZU_Qz1OYUM","colab_type":"code","colab":{}},"source":["def generate_test(user_ratings):\n","    '''\n","    for each user, random select one rating into test set\n","    '''\n","    user_test = dict()\n","    for u, i_list in user_ratings.items():\n","        user_test[u] = random.sample(user_ratings[u], 1)[0]\n","    return user_test"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"zN6eovddSxMS","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TdZX9Q_hOapS","colab_type":"text"},"source":["# BPR模型以及变型（VBPR，NVBPR，Hybrid）"]},{"cell_type":"code","metadata":{"id":"z3vd13ILOh4W","colab_type":"code","colab":{}},"source":["def abpr(user_count, item_count, advanced_features, bpr_extension= True,\n","         hidden_dim=10, hidden_img_dim=10,\n","         l2_regulization=0.1,\n","         bias_regulization=0.01,\n","         embed_regulization = 0,\n","         image_regulization =0.1,\n","         visual_bias_regulization = 0.01):\n","    \"\"\"\n","    user_count: 用户的总数\n","    item_count: 物品的总数\n","    hidden_dim: MF的hidden dimensions\n","    hidden_img_dim: MF的visual feature/non-visual feature hidden dimensions\n","    \"\"\"\n","    advanced_feat_dim = len(advanced_features[1])\n","    u = tf.placeholder(tf.int32, [None])\n","    i = tf.placeholder(tf.int32, [None])\n","    j = tf.placeholder(tf.int32, [None])\n","    iv = tf.placeholder(tf.float32, [None, advanced_feat_dim])\n","    jv = tf.placeholder(tf.float32, [None, advanced_feat_dim])\n","\n","    # model parameters -- LEARN THESE\n","    # latent factors\n","    user_emb_w = tf.get_variable(\"user_emb_w\", [user_count + 1, hidden_dim],\n","                                 initializer=tf.random_normal_initializer(0, 0.1))\n","    item_emb_w = tf.get_variable(\"item_emb_w\", [item_count + 1, hidden_dim],\n","                                 initializer=tf.random_normal_initializer(0, 0.1))\n","\n","    # UxD visual factors for users\n","    user_img_w = tf.get_variable(\"user_img_w\", [user_count + 1, hidden_img_dim],\n","                                 initializer=tf.random_normal_initializer(0, 0.1))\n","    # this is E, the embedding matrix\n","    img_emb_w = tf.get_variable(\"img_emb_w\", [hidden_img_dim, advanced_feat_dim],\n","                                initializer=tf.random_normal_initializer(0, 0.1))\n","\n","    visual_bias = tf.get_variable(\"visual_bias\", [1, advanced_feat_dim], initializer=tf.random_normal_initializer(0, 0.1))\n","\n","    # biases\n","    item_b = tf.get_variable(\"item_b\", [item_count + 1, 1], initializer=tf.constant_initializer(0.0))\n","\n","    # pull out the respective latent factor vectors for a given user u and items i & j\n","    u_emb = tf.nn.embedding_lookup(user_emb_w, u)\n","    i_emb = tf.nn.embedding_lookup(item_emb_w, i)\n","    j_emb = tf.nn.embedding_lookup(item_emb_w, j)\n","    # pull out the visual factor, 1 X D for user u\n","    u_img = tf.nn.embedding_lookup(user_img_w, u)\n","    # get the respective biases for items i & j\n","    i_b = tf.nn.embedding_lookup(item_b, i)\n","    j_b = tf.nn.embedding_lookup(item_b, j)\n","\n","\n","    # MF predict: u_i > u_j\n","    # MF predict: u_i > u_j\n","    theta_i = tf.matmul(iv, img_emb_w, transpose_b=True)  # (f_i * E), eq. 3\n","    theta_j = tf.matmul(jv, img_emb_w, transpose_b=True)  # (f_j * E), eq. 3\n","    if bpr_extension:\n","        xui = i_b + tf.reduce_sum(tf.multiply(u_emb, i_emb), 1, keep_dims=True) + tf.reduce_sum(tf.multiply(u_img, theta_i), 1, keep_dims=True) \\\n","                                                                            + tf.reduce_sum(tf.multiply(visual_bias, iv), 1, keep_dims=True) \n","        xuj = j_b + tf.reduce_sum(tf.multiply(u_emb, j_emb), 1, keep_dims=True) + tf.reduce_sum(tf.multiply(u_img, theta_j), 1, keep_dims=True) \\\n","                                                                            + tf.reduce_sum(tf.multiply(visual_bias, jv), 1, keep_dims=True) \n","    else:\n","        xui = i_b + tf.reduce_sum(tf.multiply(u_emb, i_emb), 1, keep_dims=True)\n","        xuj = j_b + tf.reduce_sum(tf.multiply(u_emb, j_emb), 1, keep_dims=True) \n","    \n","    xuij = xui - xuj\n","\n","    auc = tf.reduce_mean(tf.to_float(xuij > 0))\n","\n","    l2_norm = tf.add_n([\n","        l2_regulization * tf.reduce_sum(tf.multiply(u_emb, u_emb)),\n","        image_regulization * tf.reduce_sum(tf.multiply(u_img, u_img)),\n","        l2_regulization * tf.reduce_sum(tf.multiply(i_emb, i_emb)),\n","        l2_regulization * tf.reduce_sum(tf.multiply(j_emb, j_emb)),\n","        embed_regulization * tf.reduce_sum(tf.multiply(img_emb_w, img_emb_w)),\n","        bias_regulization * tf.reduce_sum(tf.multiply(i_b, i_b)),\n","        bias_regulization * tf.reduce_sum(tf.multiply(j_b, j_b)),\n","        visual_bias_regulization * tf.reduce_sum(tf.multiply(visual_bias, visual_bias))\n","    ])\n","\n","    loss = l2_norm - tf.reduce_mean(tf.log(tf.sigmoid(xuij)))\n","    train_op = tf.train.AdamOptimizer().minimize(loss)\n","    return u, i, j, iv, jv, loss, auc, train_op"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KClavKxNOlmR","colab_type":"text"},"source":["# 运行端对端的模型（从加载数据到训练数据到测试数据）"]},{"cell_type":"code","metadata":{"id":"mLUOR9yaOsqO","colab_type":"code","colab":{}},"source":["def session_run(num_iter, bpr_extension, advanced_features, review_nvf):\n","    ### Loading and parsing the review matrix for Cell Phones 5-core dataset\n","    auc_train = []\n","    auc_test = []\n","    auc_test_cs = []\n","    \n","    user_count, item_count, users, items, user_ratings, item_ratings, brands, \\\n","    prices, prod_desc = \n","    load_data_hybrid(review_nvf, min_items=4, min_users=0, sampling= True, sample_size = 0.5)\n","    user_ratings_test = generate_test(user_ratings)\n","    with tf.Graph().as_default(), tf.Session() as session:\n","        with tf.variable_scope('abpr'):\n","            u, i, j, iv, jv, loss, auc, train_op = abpr(user_count, item_count, \n","                                                        advanced_features, \n","                                                        bpr_extension=bpr_extension)\n","\n","        session.run(tf.global_variables_initializer())\n","        \n","\n","        for epoch in range(1, num_iter+1):\n","            print \"epoch \", epoch\n","            _loss_train = 0.0\n","            user_count = 0\n","            auc_train_values = []\n","            for d, _iv, _jv in uniform_sample_batch(user_ratings, \n","                                                    user_ratings_test, \n","                                                    item_count, \n","                                                    advanced_features):\n","                user_count += 1\n","                _loss, _auc, _ = session.run([loss, auc, train_op], feed_dict=\n","                                             {u:d[:,0], i:d[:,1], j:d[:,2], iv:_iv, jv:_jv})\n","                _loss_train += _loss\n","                auc_train_values.append(_auc)\n","            print \"train_loss:\", _loss_train/user_count, \"train auc: \", numpy.mean(auc_train_values)\n","            auc_train.append(numpy.mean(auc_train_values))\n","\n","\n","            auc_values = []\n","            _loss_test = 0.0\n","            user_count = 0\n","            for d, _iv, _jv in test_batch_generator_by_user(user_ratings, user_ratings_test, item_ratings, item_count, advanced_features, cold_start = False):\n","                user_count += 1\n","                _loss, _auc = session.run([loss, auc], feed_dict={u: d[:, 0], i: d[:, 1], j: d[:, 2], iv: _iv, jv: _jv})\n","                _loss_test += _loss\n","                auc_values.append(_auc)\n","            print \"test_loss: \", _loss_test / user_count, \"test auc: \", numpy.mean(auc_values)\n","            auc_test.append(numpy.mean(auc_values))\n","\n","            auc_values_cs = []\n","            _loss_test_cs = 0.0\n","            user_count = 0\n","            for d, _iv, _jv in test_batch_generator_by_user(user_ratings, user_ratings_test, item_ratings, item_count, advanced_features, cold_start = True, cold_start_thresh = 10):\n","                user_count += 1\n","                _loss, _auc = session.run([loss, auc], feed_dict={u: d[:, 0], i: d[:, 1], j: d[:, 2], iv: _iv, jv: _jv})\n","                _loss_test_cs += _loss\n","                auc_values_cs.append(_auc)\n","            print \"cold start test_loss: \", _loss_test_cs / user_count, \"cold start auc: \", numpy.mean(auc_values_cs)\n","            auc_test_cs.append(numpy.mean(auc_values_cs))\n","        return auc_train, auc_test, auc_test_cs"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"XuSVIVrra5QF","colab_type":"code","outputId":"e82a61c5-591e-4202-8809-1e52e200b5d6","executionInfo":{"status":"ok","timestamp":1554946521803,"user_tz":-480,"elapsed":3371,"user":{"displayName":"Jacob Ji","photoUrl":"https://lh3.googleusercontent.com/-zoRekIA1fCY/AAAAAAAAAAI/AAAAAAAACBQ/eV12vlBRQiA/s64/photo.jpg","userId":"06638368627777389358"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["!ls"],"execution_count":0,"outputs":[{"output_type":"stream","text":["sample_data\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"OHVNFbYAOuzV","colab_type":"text"},"source":["# 加载数据相关的特征"]},{"cell_type":"code","metadata":{"id":"QePAeQ1q41v2","colab_type":"code","outputId":"ee3747f5-5ba8-4bae-cb5d-41647885033b","executionInfo":{"status":"ok","timestamp":1554984067036,"user_tz":-480,"elapsed":48319,"user":{"displayName":"Jacob Ji","photoUrl":"https://lh3.googleusercontent.com/-zoRekIA1fCY/AAAAAAAAAAI/AAAAAAAACBQ/eV12vlBRQiA/s64/photo.jpg","userId":"06638368627777389358"}},"colab":{"base_uri":"https://localhost:8080/","height":88}},"source":["data_path = 'reviews_desc.csv'\n","review_nvf = load_nvf(data_path)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python2.7/dist-packages/IPython/core/interactiveshell.py:2822: DtypeWarning: Columns (3) have mixed types. Specify dtype option on import or set low_memory=False.\n","  if self.run_code(code, result):\n"],"name":"stderr"},{"output_type":"stream","text":["load nvf finished..\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"1hslWX_KOuh_","colab_type":"code","outputId":"921b259d-d582-4603-89a0-ba5d4693905f","executionInfo":{"status":"ok","timestamp":1554986231392,"user_tz":-480,"elapsed":5032,"user":{"displayName":"Jacob Ji","photoUrl":"https://lh3.googleusercontent.com/-zoRekIA1fCY/AAAAAAAAAAI/AAAAAAAACBQ/eV12vlBRQiA/s64/photo.jpg","userId":"06638368627777389358"}},"colab":{"base_uri":"https://localhost:8080/","height":566}},"source":["\n","user_count, item_count, users, items, user_ratings, item_ratings, brands, prices, prod_desc = load_data_hybrid(review_nvf, min_items=4, min_users=0, sampling= True, sample_size = 0.5)\n","\n","print(\"start loading vf..\")\n","images_path = \"movies_visual_features\"\n","f = load_image_features(images_path, items)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["(1, ' item: ', 1)\n","(4870, ' item: ', 488)\n","(9570, ' item: ', 733)\n","(13932, ' item: ', 809)\n","(17995, ' item: ', 906)\n","(22129, ' item: ', 981)\n","(25925, ' item: ', 1173)\n","(29843, ' item: ', 1309)\n","(33646, ' item: ', 1400)\n","(37387, ' item: ', 1501)\n","(41436, ' item: ', 1606)\n","(45191, ' item: ', 1668)\n","(48751, ' item: ', 1725)\n","(52284, ' item: ', 1797)\n","(55918, ' item: ', 1883)\n","(59413, ' item: ', 1933)\n","(62887, ' item: ', 2016)\n","(66748, ' item: ', 2121)\n","(70605, ' item: ', 2160)\n","(74505, ' item: ', 2206)\n","(78059, ' item: ', 2224)\n","('max_u_id: ', 78059)\n","('max_i_id: ', 2224)\n","('reviews : ', 100001)\n","('u_id: ', 1286)\n","('i_id: ', 2224)"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python2.7/dist-packages/ipykernel_launcher.py:11: DeprecationWarning: The binary mode of fromstring is deprecated, as it behaves surprisingly on unicode inputs. Use frombuffer instead\n","  # This is added back by InteractiveShellApp.init_path()\n"],"name":"stderr"},{"output_type":"stream","text":["\n","('reviews : ', 13439)\n","start loading vf..\n","load vf finished..\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"wjd9xB--OyeG","colab_type":"text"},"source":["# 运行基本的BPR模型（不加入特征数据）"]},{"cell_type":"code","metadata":{"id":"2hB1zXSBO3Fc","colab_type":"code","outputId":"57cb1708-b7e2-4790-ae9d-37b1eb64edcd","executionInfo":{"status":"ok","timestamp":1554986455704,"user_tz":-480,"elapsed":29,"user":{"displayName":"Jacob Ji","photoUrl":"https://lh3.googleusercontent.com/-zoRekIA1fCY/AAAAAAAAAAI/AAAAAAAACBQ/eV12vlBRQiA/s64/photo.jpg","userId":"06638368627777389358"}},"colab":{"base_uri":"https://localhost:8080/","height":1843}},"source":["bpr_auc_train, bpr_auc_test, bpr_auc_test_cold_start = session_run(20, False, f, review_nvf)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["(1, ' item: ', 1)\n","(4870, ' item: ', 488)\n","(9570, ' item: ', 733)\n","(13932, ' item: ', 809)\n","(17995, ' item: ', 906)\n","(22129, ' item: ', 981)\n","(25925, ' item: ', 1173)\n","(29843, ' item: ', 1309)\n","(33646, ' item: ', 1400)\n","(37387, ' item: ', 1501)\n","(41436, ' item: ', 1606)\n","(45191, ' item: ', 1668)\n","(48751, ' item: ', 1725)\n","(52284, ' item: ', 1797)\n","(55918, ' item: ', 1883)\n","(59413, ' item: ', 1933)\n","(62887, ' item: ', 2016)\n","(66748, ' item: ', 2121)\n","(70605, ' item: ', 2160)\n","(74505, ' item: ', 2206)\n","(78059, ' item: ', 2224)\n","('max_u_id: ', 78059)\n","('max_i_id: ', 2224)\n","('reviews : ', 100001)\n","('u_id: ', 1286)\n","('i_id: ', 2224)\n","('reviews : ', 13439)\n","epoch  1\n","train_loss: 0.97491012228592 train auc:  0.7693349\n","test_loss:  2.5284337458299033 test auc:  0.832178\n","cold start test_loss:  2.8008874356746674 cold start auc:  0.33916035\n","epoch  2\n","train_loss: 0.7833304111824065 train auc:  0.8762047\n","test_loss:  1.7433853405714035 test auc:  0.85852873\n","cold start test_loss:  1.8833046176216819 cold start auc:  0.23463728\n","epoch  3\n","train_loss: 0.6849290235648815 train auc:  0.8821246\n","test_loss:  1.305097485307473 test auc:  0.8485933\n","cold start test_loss:  1.6708650887012482 cold start auc:  0.2752522\n","epoch  4\n","train_loss: 0.6196745077892558 train auc:  0.8869531\n","test_loss:  1.1072178221585458 test auc:  0.8606676\n","cold start test_loss:  1.3441835343837738 cold start auc:  0.34229165\n","epoch  5\n","train_loss: 0.5757202039795752 train auc:  0.88678217\n","test_loss:  0.9959394623339176 test auc:  0.8634323\n","cold start test_loss:  1.2751110990842183 cold start auc:  0.39217082\n","epoch  6\n","train_loss: 0.5445543716938277 train auc:  0.8916308\n","test_loss:  0.9690169727891907 test auc:  0.8540603\n","cold start test_loss:  1.2464626908302308 cold start auc:  0.37919804\n","epoch  7\n","train_loss: 0.5232710217474779 train auc:  0.8927521\n","test_loss:  0.9822143515450271 test auc:  0.86660177\n","cold start test_loss:  1.2398720607161522 cold start auc:  0.32404763\n","epoch  8\n","train_loss: 0.508796270722364 train auc:  0.89416164\n","test_loss:  1.0136036036307352 test auc:  0.8653499\n","cold start test_loss:  1.2240457870066166 cold start auc:  0.33363003\n","epoch  9\n","train_loss: 0.49646334310712564 train auc:  0.89219433\n","test_loss:  1.043313232064247 test auc:  0.8667938\n","cold start test_loss:  1.3119029336505466 cold start auc:  0.31382716\n","epoch  10\n","train_loss: 0.4915237479827267 train auc:  0.8899283\n","test_loss:  1.0571639641145965 test auc:  0.8790752\n","cold start test_loss:  1.3091149429480236 cold start auc:  0.38107952\n","epoch  11\n","train_loss: 0.48714900422337265 train auc:  0.8884059\n","test_loss:  1.0852922942106586 test auc:  0.8511536\n","cold start test_loss:  1.369263538947472 cold start auc:  0.39153135\n","epoch  12\n","train_loss: 0.4828756052195377 train auc:  0.8954815\n","test_loss:  1.141772862962613 test auc:  0.85426563\n","cold start test_loss:  1.4702427495609631 cold start auc:  0.38842973\n","epoch  13\n","train_loss: 0.4805943195825417 train auc:  0.8874359\n","test_loss:  1.160061542551619 test auc:  0.86423504\n","cold start test_loss:  1.5107306412288122 cold start auc:  0.4107698\n","epoch  14\n","train_loss: 0.4740912785658013 train auc:  0.8944034\n","test_loss:  1.2076994638946188 test auc:  0.8760514\n","cold start test_loss:  1.529070754845937 cold start auc:  0.41225323\n","epoch  15\n","train_loss: 0.47284416658557593 train auc:  0.8913468\n","test_loss:  1.223735855268291 test auc:  0.85289115\n","cold start test_loss:  1.6385521608240463 cold start auc:  0.41469193\n","epoch  16\n","train_loss: 0.4747978614333258 train auc:  0.891232\n","test_loss:  1.2504101831811412 test auc:  0.8594835\n","cold start test_loss:  1.7263478149067273 cold start auc:  0.34877273\n","epoch  17\n","train_loss: 0.47363594016798916 train auc:  0.8904473\n","test_loss:  1.2686266674101352 test auc:  0.85437876\n","cold start test_loss:  1.7050070592335291 cold start auc:  0.43279484\n","epoch  18\n","train_loss: 0.4691027003929923 train auc:  0.89128774\n","test_loss:  1.3000898293982772 test auc:  0.8704083\n","cold start test_loss:  1.7694191474180956 cold start auc:  0.3978119\n","epoch  19\n","train_loss: 0.4688190352026819 train auc:  0.8933102\n","test_loss:  1.3145883824657556 test auc:  0.8625588\n","cold start test_loss:  1.8919103970894446 cold start auc:  0.3786014\n","epoch  20\n","train_loss: 0.4702136630705133 train auc:  0.89197\n","test_loss:  1.3337784499154055 test auc:  0.8656994\n","cold start test_loss:  1.9036788418889046 cold start auc:  0.33830053\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"pGwpO2usO5BE","colab_type":"text"},"source":["# 运行VBPR（加入视觉特征）"]},{"cell_type":"code","metadata":{"id":"Lz_PWWrZPB1D","colab_type":"code","outputId":"6d37a739-3dfc-4c2d-b63e-e06bd049102b","executionInfo":{"status":"ok","timestamp":1554985412218,"user_tz":-480,"elapsed":218444,"user":{"displayName":"Jacob Ji","photoUrl":"https://lh3.googleusercontent.com/-zoRekIA1fCY/AAAAAAAAAAI/AAAAAAAACBQ/eV12vlBRQiA/s64/photo.jpg","userId":"06638368627777389358"}},"colab":{"base_uri":"https://localhost:8080/","height":1843}},"source":["vbpr_auc_train, vbpr_auc_test, vbpr_auc_test_cold_start = session_run(20, True, f, review_nvf)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["(1, ' item: ', 1)\n","(4874, ' item: ', 326)\n","(9639, ' item: ', 652)\n","(14191, ' item: ', 884)\n","(18472, ' item: ', 920)\n","(22616, ' item: ', 977)\n","(26476, ' item: ', 1035)\n","(30293, ' item: ', 1095)\n","(34212, ' item: ', 1145)\n","(38096, ' item: ', 1303)\n","(41460, ' item: ', 1415)\n","(45166, ' item: ', 1500)\n","(48826, ' item: ', 1559)\n","(52415, ' item: ', 1612)\n","(55802, ' item: ', 1669)\n","(59595, ' item: ', 1771)\n","(63399, ' item: ', 1821)\n","(66834, ' item: ', 1861)\n","(70494, ' item: ', 1908)\n","(73702, ' item: ', 1933)\n","(76959, ' item: ', 1977)\n","('max_u_id: ', 76959)\n","('max_i_id: ', 1977)\n","('reviews : ', 100001)\n","('u_id: ', 1366)\n","('i_id: ', 1977)\n","('reviews : ', 14403)\n","epoch  1\n","train_loss: 0.9263184884587633 train auc:  0.73590714\n","test_loss:  2.423168314130683 test auc:  0.7678422\n","cold start test_loss:  2.9680502653121947 cold start auc:  0.39402863\n","epoch  2\n","train_loss: 0.7023987289447212 train auc:  0.8211749\n","test_loss:  1.6828563232768448 test auc:  0.82006836\n","cold start test_loss:  1.9058706164360046 cold start auc:  0.4832653\n","epoch  3\n","train_loss: 0.6048675602735573 train auc:  0.85732824\n","test_loss:  1.4012727373838425 test auc:  0.83031946\n","cold start test_loss:  1.8640326682259054 cold start auc:  0.3920619\n","epoch  4\n","train_loss: 0.5326759431342081 train auc:  0.8864834\n","test_loss:  1.312940703332424 test auc:  0.85202163\n","cold start test_loss:  1.9896825353304546 cold start auc:  0.3274124\n","epoch  5\n","train_loss: 0.47643507109466793 train auc:  0.9059576\n","test_loss:  1.3757873165607453 test auc:  0.8378076\n","cold start test_loss:  1.458563542366028 cold start auc:  0.49705917\n","epoch  6\n","train_loss: 0.42787829950168227 train auc:  0.916498\n","test_loss:  1.3898961998522281 test auc:  0.83560073\n","cold start test_loss:  1.7536828021208446 cold start auc:  0.431738\n","epoch  7\n","train_loss: 0.39434767936630444 train auc:  0.92362565\n","test_loss:  1.4635153618454932 test auc:  0.83085215\n","cold start test_loss:  1.9863987763722737 cold start auc:  0.54802185\n","epoch  8\n","train_loss: 0.37021427584122074 train auc:  0.9232097\n","test_loss:  1.486031763702631 test auc:  0.8294304\n","cold start test_loss:  1.849275141954422 cold start auc:  0.55229264\n","epoch  9\n","train_loss: 0.34973932934671337 train auc:  0.9294963\n","test_loss:  1.5391705159842968 test auc:  0.81987906\n","cold start test_loss:  2.202179021305508 cold start auc:  0.5000128\n","epoch  10\n","train_loss: 0.3315331950772821 train auc:  0.9343755\n","test_loss:  1.5817544719576835 test auc:  0.8245479\n","cold start test_loss:  2.0460830529530845 cold start auc:  0.5423766\n","epoch  11\n","train_loss: 0.3237393133364083 train auc:  0.93543327\n","test_loss:  1.560030328631401 test auc:  0.8253667\n","cold start test_loss:  1.7239501584659924 cold start auc:  0.6759233\n","epoch  12\n","train_loss: 0.3106293936490489 train auc:  0.93962204\n","test_loss:  1.5882070445476617 test auc:  0.82000625\n","cold start test_loss:  2.0176283915837607 cold start auc:  0.6025563\n","epoch  13\n","train_loss: 0.30403790149788645 train auc:  0.9357853\n","test_loss:  1.5710343131422997 test auc:  0.8197916\n","cold start test_loss:  2.406275822566106 cold start auc:  0.55901325\n","epoch  14\n","train_loss: 0.29486001138391293 train auc:  0.93794787\n","test_loss:  1.564503949135542 test auc:  0.815645\n","cold start test_loss:  2.0468136191368105 cold start auc:  0.6718866\n","epoch  15\n","train_loss: 0.2833106682811745 train auc:  0.9443606\n","test_loss:  1.5396742637455463 test auc:  0.8251547\n","cold start test_loss:  2.089508891105652 cold start auc:  0.5344449\n","epoch  16\n","train_loss: 0.2796912801535159 train auc:  0.9405689\n","test_loss:  1.5769506452977657 test auc:  0.8143509\n","cold start test_loss:  2.388444632291794 cold start auc:  0.5346422\n","epoch  17\n","train_loss: 0.27607078939992635 train auc:  0.9411655\n","test_loss:  1.5304239155352115 test auc:  0.82611984\n","cold start test_loss:  2.177024519443512 cold start auc:  0.5774226\n","epoch  18\n","train_loss: 0.26714957422559116 train auc:  0.9456236\n","test_loss:  1.5337862254384167 test auc:  0.82453656\n","cold start test_loss:  2.3700579272376165 cold start auc:  0.5182503\n","epoch  19\n","train_loss: 0.261999523572591 train auc:  0.94476485\n","test_loss:  1.5850876784324646 test auc:  0.79985344\n","cold start test_loss:  1.7888717104991276 cold start auc:  0.6800874\n","epoch  20\n","train_loss: 0.25614720723683104 train auc:  0.94516695\n","test_loss:  1.5565101446211338 test auc:  0.8023674\n","cold start test_loss:  2.2325476672914295 cold start auc:  0.464959\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"NzCZVqZUfzvj","colab_type":"code","colab":{}},"source":["import "],"execution_count":0,"outputs":[]}]}